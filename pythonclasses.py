# -*- coding: utf-8 -*-
"""pythonclasses.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RaiBIUFgxTx02at0qrxPmUcBQsULkM7p
"""

class BankAccount:
    def __init__(self, custname, accnum, balance, acctype, address):
        self.custname = custname
        self.accnum = accnum
        self.balance = balance
        self.acctype = acctype
        self.address = address

    def withdraw(self, amount):
        self.balance -= amount
        print(f"Amount withdrawn, balance is now {self.balance}")

    def deposit(self, amount):
        self.balance += amount
        print(f"Amount deposited, balance is now {self.balance}")

    def display(self):
        print(f"{self.custname},\t{self.accnum},\t{self.balance},\t{self.acctype},\t{self.address}")


account1 = BankAccount("Tejas", 10023, 19234, "Savings", "Bangalore")
account2 = BankAccount("John Doe", "123456789", 5000, "Savings", "123 Main Street")
account3 = BankAccount("Jane Smith", "987654321", 10000, "Checking", "456 Elm Street")

account1.display()
account1.withdraw(2000)
account1.deposit(500)
account1.display()

account2.display()
account2.withdraw(1500)
account2.deposit(2000)
account2.display()

account3.display()
account3.withdraw(1670)
account3.deposit(2020)
account3.display()

class Employee:
    def __init__(self, emp_id, emp_name, emp_designation, experience, age):
        self.emp_id = emp_id
        self.emp_name = emp_name
        self.emp_designation = emp_designation
        self.experience = experience
        self.age = age

    def add_employee(self):
        print("Employee added successfully.")

    def display_details(self):
        print(f"Employee ID: {self.emp_id}")
        print(f"Employee Name: {self.emp_name}")
        print(f"Designation: {self.emp_designation}")
        print(f"Experience: {self.experience} years")
        print(f"Age: {self.age} years")

    def calculate_salary(self, basic):
        if self.age < 30 and self.experience >= 5:
            salary = 1.5 * basic
        elif self.age < 40 and self.experience >= 5:
            salary = 1.75 * basic
        elif self.age < 40 and self.experience >= 10:
            salary = 2 * basic
        elif self.age < 50 and self.experience >= 20:
            salary = 2.25 * basic
        elif self.age < 50 and self.experience >= 25:
            salary = 2.5 * basic
        elif self.age < 58 and self.experience >= 30:
            salary = 3 * basic
        else:
            salary = basic

        return salary


# Create an employee object and perform operations
emp1 = Employee("E001", "John Doe", "Manager", 8, 35)
emp1.display_details()
salary1 = emp1.calculate_salary(50000)
print(f"Calculated salary: {salary1}")

# Add more employees and perform operations
emp2 = Employee("E002", "Jane Smith", "Developer", 12, 42)
emp2.display_details()
salary2 = emp2.calculate_salary(60000)
print(f"Calculated salary: {salary2}")

emp3 = Employee("E003", "Mike Johnson", "CEO", 26, 55)
emp3.display_details()
salary3 = emp3.calculate_salary(80000)
print(f"Calculated salary: {salary3}")

class FourthSem:
    def __init__(self, roll_nums, test1_marks, test2_marks, test3_marks):
        self.roll_nums = roll_nums
        self.test1_marks = test1_marks
        self.test2_marks = test2_marks
        self.test3_marks = test3_marks

    def calculate_class_average(self, marks):
        total_marks = sum(marks)
        class_average = total_marks / len(marks)
        return class_average

    def calculate_student_average(self, roll_num):
        index = self.roll_nums.index(roll_num)
        test1_avg = self.calculate_class_average(self.test1_marks)
        test2_avg = self.calculate_class_average(self.test2_marks)
        test3_avg = self.calculate_class_average(self.test3_marks)

        student_avg = (self.test1_marks[index] + self.test2_marks[index] + self.test3_marks[index]) / 3
        return student_avg, test1_avg, test2_avg, test3_avg

    def display_top_scores(self, marks, num_scores):
        sorted_marks = sorted(marks, reverse=True)
        top_scores = sorted_marks[:num_scores]
        return top_scores

    def display_last_scores(self, marks, num_scores):
        sorted_marks = sorted(marks)
        last_scores = sorted_marks[:num_scores]
        return last_scores


# Test data for a class of 20 students
roll_nums = [101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
             111, 112, 113, 114, 115, 116, 117, 118, 119, 120]
test1_marks = [75, 85, 90, 70, 95, 80, 85, 90, 88, 92,
               78, 82, 86, 95, 90, 88, 82, 75, 85, 80]
test2_marks = [80, 92, 85, 78, 90, 85, 88, 92, 80, 85,
               88, 92, 78, 82, 90, 95, 88, 82, 75, 85]
test3_marks = [90, 88, 82, 95, 80, 85, 90, 85, 88, 92,
               78, 82, 86, 95, 90, 88, 82, 75, 85, 80]

# Create a FourthSem object
class_scores = FourthSem(roll_nums, test1_marks, test2_marks, test3_marks)

# Calculate class average for each test
test1_avg = class_scores.calculate_class_average(test1_marks)
test2_avg = class_scores.calculate_class_average(test2_marks)
test3_avg = class_scores.calculate_class_average(test3_marks)

print(f"Class Average for Test 1: {test1_avg}")
print(f"Class Average for Test 2: {test2_avg}")
print(f"Class Average for Test 3: {test3_avg}")

# Calculate and display student averages
student_roll_num = 103
student_avg, test1_avg, test2_avg, test3_avg = class_scores.calculate_student_average(student_roll_num)
print(f"\nStudent Roll Number: {student_roll_num}")
print(f"Test 1 Average: {test1_avg}")
print(f"Test 2 Average: {test2_avg}")
print(f"Test 3 Average: {test3_avg}")
print(f"Student Average: {student_avg}")

# Display top and last scores for each test
num_scores = 5
top_scores_test1 = class_scores.display_top_scores(test1_marks, num_scores)
last_scores_test1 = class_scores.display_last_scores(test1_marks, num_scores)
print("\nTop Scores for Test 1:", top_scores_test1)
print("Last Scores for Test 1:", last_scores_test1)

top_scores_test2 = class_scores.display_top_scores(test2_marks, num_scores)
last_scores_test2 = class_scores.display_last_scores(test2_marks, num_scores)
print("\nTop Scores for Test 2:", top_scores_test2)
print("Last Scores for Test 2:", last_scores_test2)

top_scores_test3 = class_scores.display_top_scores(test3_marks, num_scores)
last_scores_test3 = class_scores.display_last_scores(test3_marks, num_scores)
print("\nTop Scores for Test 3:", top_scores_test3)
print("Last Scores for Test 3:", last_scores_test3)

class TimeClass:
    def __init__(self, hours, minutes, seconds):
        self.hours = hours
        self.minutes = minutes
        self.seconds = seconds

    def displayTime(self):
        print(f"{self.hours:02d}:{self.minutes:02d}:{self.seconds:02d}")

    def addTime(self, time):
        total_seconds = self.countSeconds() + time.countSeconds()
        new_hours = total_seconds // 3600
        remaining_seconds = total_seconds % 3600
        new_minutes = remaining_seconds // 60
        new_seconds = remaining_seconds % 60
        return TimeClass(new_hours, new_minutes, new_seconds)

    def subtractTime(self, time):
        total_seconds = self.countSeconds() - time.countSeconds()
        if total_seconds < 0:
            raise ValueError("Cannot subtract larger time from smaller time.")
        new_hours = total_seconds // 3600
        remaining_seconds = total_seconds % 3600
        new_minutes = remaining_seconds // 60
        new_seconds = remaining_seconds % 60
        return TimeClass(new_hours, new_minutes, new_seconds)

    def countSeconds(self):
        return self.hours * 3600 + self.minutes * 60 + self.seconds


# Example usage:
time1 = TimeClass(1, 30, 45)
time2 = TimeClass(0, 45, 20)

time1.displayTime()  # Output: 01:30:45
time2.displayTime()  # Output: 00:45:20

sum_time = time1.addTime(time2)
sum_time.displayTime()  # Output: 02:16:05

diff_time = time1.subtractTime(time2)
diff_time.displayTime()  # Output: 00:45:25

print(time1.countSeconds())  # Output: 5445
print(time2.countSeconds())  # Output: 2720

class Invoice:
    def __init__(self):
        self.items = []
        self.prices = []

    def addItem(self, item, price):
        self.items.append(item)
        self.prices.append(price)

    def calculateTax(self, item_type):
        gst_rates = {
            1: 0.05,
            2: 0.12,
            3: 0.18,
            4: 0.28
        }
        gst_rate = gst_rates.get(item_type, 0)
        total_tax = 0
        for price in self.prices:
            total_tax += price * gst_rate
        return total_tax

    def printInvoice(self):
        total_amount = sum(self.prices)
        total_items = len(self.items)
        print("********** Invoice **********")
        print("Items Purchased:")
        for i in range(total_items):
            print(f"- {self.items[i]}: ₹{self.prices[i]:.2f}")
        print("-----------------------------")
        print(f"Total Items: {total_items}")
        print(f"Subtotal: ₹{total_amount:.2f}")
        print(f"Tax (GST): ₹{self.calculateTax(1):.2f}")
        print("-----------------------------")
        print(f"Final Bill: ₹{total_amount + self.calculateTax(1):.2f}")


# Example usage:
invoice = Invoice()

invoice.addItem("Item 1 (Type 1)", 10)
invoice.addItem("Item 2 (Type 2)", 20)
invoice.addItem("Item 3 (Type 3)", 30)
invoice.addItem("Item 4 (Type 4)", 40)

invoice.printInvoice()

class Shape:
    def __init__(self, side1, side2):
        self.side1 = side1
        self.side2 = side2

    def calculateArea(self):
        pass  # To be implemented by subclasses

    def displayDetails(self):
        pass  # To be implemented by subclasses


class Rectangle(Shape):
    def __init__(self, side1, side2):
        super().__init__(side1, side2)

    def calculateArea(self):
        return self.side1 * self.side2

    def displayDetails(self):
        print("Shape: Rectangle")
        print(f"Side 1: {self.side1}")
        print(f"Side 2: {self.side2}")
        print(f"Area: {self.calculateArea()}")


class Triangle(Shape):
    def __init__(self, side1, side2):
        super().__init__(side1, side2)

    def calculateArea(self):
        return 0.5 * self.side1 * self.side2

    def displayDetails(self):
        print("Shape: Triangle")
        print(f"Side 1: {self.side1}")
        print(f"Side 2: {self.side2}")
        print(f"Area: {self.calculateArea()}")


# Example usage:
rectangle = Rectangle(4, 6)
rectangle.displayDetails()

triangle = Triangle(3, 5)
triangle.displayDetails()

